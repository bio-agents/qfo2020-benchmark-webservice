# checks whether a file exists
FileExists := proc(fname) 
    return( length(FileStat(fname))>0 );
end:

#
# checks if the process created the lock-file is still alive
IsLockProcessAlive := proc(lock:string)
    fs := FileStat(lock);
    if length(fs)=0 then error('lockfile not present') fi:
    
    # wait for result page but also check, whether job is still running
    lockOldAndEmpty := fs['st_size']=0 and UTCTime()-fs['st_mtime']>60;
    procDeath := false; msg := '';
    if fs['st_size']>0 then
        for i to 3 do
            cont := traperror(ReadRawFile(lock));
            if cont<>lasterror then break;
            else sleep(2^(i-1)) fi:
        od:
        if cont=lasterror then error(cont); fi:
        cont := SplitLines(cont);
        pid := cont[1];
        if length(cont)>1 then msg := ConcatStrings(cont[2..-1]) fi:
        t := TimedCallSystem('ps -eo pid | grep -w '.pid, 4);
        procDeath := evalb(t[1]<>0);
    fi:
    return( not(lockOldAndEmpty or procDeath), msg );
end:

# creates a message about the status of the process created the lock file.
HandleLockFile := proc(lock:string)
    alive, msg := IsLockProcessAlive(lock);
    if alive then
        if msg <> '' then 
            msg := '<p><b>Status:</b> '.msg.'</p>';
        fi:
        return( msg.'<p>We are still computing the results ...</p>' );
    else
        CallSystem('rm -f '.lock);
        return('<p>Computation crashed. Try to restart by resubmitting request.</p>'); 
    fi:
end:

# writes a message in the lockfile (after storing process id)
WriteLock := proc(lock:string, msg:string)
    OpenWriting(lock):
    lprint(getpid());
    prints(msg);
    OpenWriting(previous);
end:

